/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VRMinerVisualAssistant_IGA.java
 *
 * Created on 16 déc. 2010, 17:01:00
 */

package visualassistantfacv;


import VisualAssistantFDM.visualisation.ui.MEC;
import VisualAssistantFDM.visualisation.ui.Matching;
import VisualAssistantFDM.visualisation.ui.Visualisation;
import VisualAssistantFDM.visualisation.ui.Appariement;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Raster;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.vecmath.Point3f;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import visualisation3d.vrmNuage3D.Visualisation_Nuage_3D;
import visualisation3d.xml.NUAGE3D;
import vrminerlib.io.VRMXML;
import vrminerlib.object3d.Object3D;
import vrminerlib.scene.PointOfView;
import vrminerlib.scene.PointOfViewMouseAdapter;
import vrminerlib.scene.Scene3D;




/**
 *
 * @author Abdelheq
 */
public class VRMinerVisualAssistant_IGA extends javax.swing.JFrame {

    /** Creates new form VRMinerVisualAssistant_IGA */
    public VRMinerVisualAssistant_IGA(List<Appariement> MatchingResult, String filePathName, List<Visualisation> DataAttributeList, List<Visualisation> VisualAttributeList, String ElemGraph) throws Exception{
    //public VRMinerVisualAssistant_IGA(List<Appariement> MatchingResult, File PathNamefile, List<Visualisation> DataAttributeList, List<Visualisation> VisualAttributeList, String ElemGraph) throws Exception{
        
        /* Nom de la méthode de visualisation (Element graphique de base ex. NUAGE3D_CUBE) */
        MethodeName = ElemGraph;
        /* le chemin du fichier xml (Path of data base) */
        XMLfilepathName = filePathName;
        /* Liste des attributs de données initial avant matching */
        ListInitialDataAttribute = DataAttributeList;
        /*  Initialisation du nombre d'itération de l'algorithme génétique */
        NbreIteration = 0;
        Individual_Size = MatchingResult.size();
        initialisation();
        /* Liste des attributs visuels*/
        Initial_v_attribte = CreateVisualAttributeList(MatchingResult);
        /* Liste des attributs de données choisies lors de l'opération de mise en correspondance */
        Initial_d_attribte = CreateDataAttributeList(MatchingResult);
        /* Créer la population initial avec comme paramétes - attributs de données et attributs visuels */
        InitialPopulation = GenererInitialPopulation(Initial_d_attribte, Initial_v_attribte);
        /* Affectation du résultat de la mise en correspondance de l'étape précédante */
        NewMatchingIndividualResult = MatchingResult;
        for(int i =0; i<8; i++){
          ReadXMLFileGA(XMLfilepathName, i);
          UpdateElement_InitialPopulation(Individual_Size, InitialPopulation, i);
          //UpdateElement(Initial_v_attribte, InitialPopulation, i);
          enregistreFichier(filePathName);
        }
        initComponents();
        Step5.setEnabled(false);
        Step6.setEnabled(false);
        AfficherIndividus(XMLfilepathName);

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new javax.swing.JPanel();
        scrollpane1 = new javax.swing.JScrollPane();
        CheckBox1 = new javax.swing.JCheckBox();
        scrollpane9 = new javax.swing.JScrollPane();
        panel2 = new javax.swing.JPanel();
        scrollpane2 = new javax.swing.JScrollPane();
        CheckBox2 = new javax.swing.JCheckBox();
        panel4 = new javax.swing.JPanel();
        scrollpane4 = new javax.swing.JScrollPane();
        CheckBox4 = new javax.swing.JCheckBox();
        panel5 = new javax.swing.JPanel();
        CheckBox5 = new javax.swing.JCheckBox();
        scrollpane5 = new javax.swing.JScrollPane();
        panel6 = new javax.swing.JPanel();
        scrollpane6 = new javax.swing.JScrollPane();
        CheckBox6 = new javax.swing.JCheckBox();
        panel8 = new javax.swing.JPanel();
        scrollpane8 = new javax.swing.JScrollPane();
        CheckBox8 = new javax.swing.JCheckBox();
        panel7 = new javax.swing.JPanel();
        scrollpane7 = new javax.swing.JScrollPane();
        CheckBox7 = new javax.swing.JCheckBox();
        panel3 = new javax.swing.JPanel();
        scrollpane3 = new javax.swing.JScrollPane();
        CheckBox3 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        CreateNewPopulationButton = new javax.swing.JButton();
        CreateFinalProfilButton = new javax.swing.JButton();
        CloseButton = new javax.swing.JButton();
        Step4 = new javax.swing.JLabel();
        Step5 = new javax.swing.JLabel();
        Step6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interactive Genetic Algorithm");

        panel1.setPreferredSize(new java.awt.Dimension(350, 300));

        CheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CheckBox1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollpane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(CheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addComponent(scrollpane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        //visu3D1 = new Visualisation_Nuage_3D(0, 0, 0);
        //visu3D1.ConfigurationNuage3D("C:\\Users\\Abdelheq\\Desktop\\IRIS.xml", "profil"+0);
        //visu3D1.createScene();
        //scrollpane1.setViewportView(visu3D1.getCustomCanvas3D());
        //visu3D1.addPointOfViewListener(visu3D1.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
            //
            //@Override
            //public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
                //
                //updatePreview(0);//afficher le profil i : qui est passé en paramètre
                //
                //}
            //});

    panel2.setPreferredSize(new java.awt.Dimension(350, 300));

    CheckBox2.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            CheckBox2ItemStateChanged(evt);
        }
    });

    javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
    panel2.setLayout(panel2Layout);
    panel2Layout.setHorizontalGroup(
        panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(scrollpane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(CheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    panel2Layout.setVerticalGroup(
        panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panel2Layout.createSequentialGroup()
            .addComponent(scrollpane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(CheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, Short.MAX_VALUE)
            .addContainerGap())
    );

    //visu3D2 = new Visualisation_Nuage_3D(0, 0, 0);
    //visu3D2.ConfigurationNuage3D("C:\\Users\\Abdelheq\\Desktop\\IRIS.xml", "profil"+1);
    //visu3D2.createScene();
    //scrollpane2.setViewportView(visu3D2.getCustomCanvas3D());
    //visu3D2.addPointOfViewListener(visu3D2.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        //
        //@Override
        //public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
            //
            //updatePreview(1);//afficher le profil i : qui est passé en paramètre
            //
            //}
        //});

panel4.setPreferredSize(new java.awt.Dimension(350, 300));

CheckBox4.addItemListener(new java.awt.event.ItemListener() {
    public void itemStateChanged(java.awt.event.ItemEvent evt) {
        CheckBox4ItemStateChanged(evt);
    }
    });

    javax.swing.GroupLayout panel4Layout = new javax.swing.GroupLayout(panel4);
    panel4.setLayout(panel4Layout);
    panel4Layout.setHorizontalGroup(
        panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(scrollpane4, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(CheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    panel4Layout.setVerticalGroup(
        panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panel4Layout.createSequentialGroup()
            .addComponent(scrollpane4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(CheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    //visu3D4 = new Visualisation_Nuage_3D(0, 0, 0);
    //visu3D4.ConfigurationNuage3D("C:\\Users\\Abdelheq\\Desktop\\IRIS.xml", "profil"+3);
    //visu3D4.createScene();
    //scrollpane4.setViewportView(visu3D4.getCustomCanvas3D());
    //visu3D4.addPointOfViewListener(visu3D4.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        //
        //@Override
        //public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
            //
            //updatePreview(3);//afficher le profil i : qui est passé en paramètre
            //
            //}
        //});

panel5.setPreferredSize(new java.awt.Dimension(350, 300));
panel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

CheckBox5.addItemListener(new java.awt.event.ItemListener() {
    public void itemStateChanged(java.awt.event.ItemEvent evt) {
        CheckBox5ItemStateChanged(evt);
    }
    });
    panel5.add(CheckBox5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 238, 20));
    panel5.add(scrollpane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 250));
    //visu3D5 = new Visualisation_Nuage_3D(0, 0, 0);
    //visu3D5.ConfigurationNuage3D("C:\\Users\\Abdelheq\\Desktop\\IRIS.xml", "profil"+4);
    //visu3D5.createScene();
    //scrollpane5.setViewportView(visu3D5.getCustomCanvas3D());
    //visu3D5.addPointOfViewListener(visu3D5.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        //
        //@Override
        //public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
            //
            //updatePreview(4);//afficher le profil i : qui est passé en paramètre
            //
            //}
        //});

panel6.setPreferredSize(new java.awt.Dimension(350, 300));
panel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
panel6.add(scrollpane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 250));
//visu3D6 = new Visualisation_Nuage_3D(0, 0, 0);
//visu3D6.ConfigurationNuage3D("C:\\Users\\Abdelheq\\Desktop\\IRIS.xml", "profil"+5);
//visu3D6.createScene();
//scrollpane6.setViewportView(visu3D6.getCustomCanvas3D());
//visu3D6.addPointOfViewListener(visu3D6.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
    //
    //@Override
    //public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
        //
        //updatePreview(5);//afficher le profil i : qui est passé en paramètre
        //
        //}
    //});

    CheckBox6.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            CheckBox6ItemStateChanged(evt);
        }
    });
    panel6.add(CheckBox6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 238, 20));

    panel8.setPreferredSize(new java.awt.Dimension(350, 300));

    CheckBox8.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            CheckBox8ItemStateChanged(evt);
        }
    });

    javax.swing.GroupLayout panel8Layout = new javax.swing.GroupLayout(panel8);
    panel8.setLayout(panel8Layout);
    panel8Layout.setHorizontalGroup(
        panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panel8Layout.createSequentialGroup()
            .addGroup(panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scrollpane8, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(CheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(1, Short.MAX_VALUE))
    );
    panel8Layout.setVerticalGroup(
        panel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panel8Layout.createSequentialGroup()
            .addComponent(scrollpane8, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(CheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    //visu3D8 = new Visualisation_Nuage_3D(0, 0, 0);
    //visu3D8.ConfigurationNuage3D("C:\\Users\\Abdelheq\\Desktop\\IRIS.xml", "profil"+7);
    //visu3D8.createScene();
    //scrollpane8.setViewportView(visu3D8.getCustomCanvas3D());
    //visu3D8.addPointOfViewListener(visu3D8.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        //
        //@Override
        //public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
            //
            //updatePreview(7);//afficher le profil i : qui est passé en paramètre
            //
            //}
        //});

panel7.setPreferredSize(new java.awt.Dimension(350, 300));

CheckBox7.addItemListener(new java.awt.event.ItemListener() {
    public void itemStateChanged(java.awt.event.ItemEvent evt) {
        CheckBox7ItemStateChanged(evt);
    }
    });

    javax.swing.GroupLayout panel7Layout = new javax.swing.GroupLayout(panel7);
    panel7.setLayout(panel7Layout);
    panel7Layout.setHorizontalGroup(
        panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(scrollpane7, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(CheckBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    panel7Layout.setVerticalGroup(
        panel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panel7Layout.createSequentialGroup()
            .addComponent(scrollpane7, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(CheckBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    //visu3D7 = new Visualisation_Nuage_3D(0, 0, 0);
    //visu3D7.ConfigurationNuage3D("C:\\Users\\Abdelheq\\Desktop\\IRIS.xml", "profil"+6);
    //visu3D7.createScene();
    //scrollpane7.setViewportView(visu3D7.getCustomCanvas3D());
    //visu3D7.addPointOfViewListener(visu3D7.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        //
        //@Override
        //public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
            //
            //updatePreview(6);//afficher le profil i : qui est passé en paramètre
            //
            //}
        //});

panel3.setPreferredSize(new java.awt.Dimension(350, 300));

CheckBox3.addItemListener(new java.awt.event.ItemListener() {
    public void itemStateChanged(java.awt.event.ItemEvent evt) {
        CheckBox3ItemStateChanged(evt);
    }
    });

    javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
    panel3.setLayout(panel3Layout);
    panel3Layout.setHorizontalGroup(
        panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(scrollpane3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addComponent(CheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    panel3Layout.setVerticalGroup(
        panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panel3Layout.createSequentialGroup()
            .addComponent(scrollpane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(CheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, Short.MAX_VALUE)
            .addContainerGap())
    );

    //visu3D3 = new Visualisation_Nuage_3D(0, 0, 0);
    //visu3D3.ConfigurationNuage3D("C:\\Users\\Abdelheq\\Desktop\\IRIS.xml", "profil"+2);
    //visu3D3.createScene();
    //scrollpane3.setViewportView(visu3D3.getCustomCanvas3D());
    //visu3D3.addPointOfViewListener(visu3D3.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        //
        //@Override
        //public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
            //
            //updatePreview(2);//afficher le profil i : qui est passé en paramètre
            //
            //}
        //});

jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(" Adjust Configuration "));
jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

CreateNewPopulationButton.setText("New Population");
CreateNewPopulationButton.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        CreateNewPopulationButtonActionPerformed(evt);
    }
    });
    jPanel1.add(CreateNewPopulationButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 171, -1));

    CreateFinalProfilButton.setText("Save Selected Individual");
    CreateFinalProfilButton.setEnabled(false);
    CreateFinalProfilButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            CreateFinalProfilButtonActionPerformed(evt);
        }
    });
    jPanel1.add(CreateFinalProfilButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

    CloseButton.setText("Close");
    CloseButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            CloseButtonActionPerformed(evt);
        }
    });
    jPanel1.add(CloseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 171, -1));

    Step4.setText("   4. Select Individual (s) ");

    Step5.setText("   5. Save Seledted Individual (s) ");

    Step6.setText("   6. Close ");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                    .addGap(8, 8, 8)
                    .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(8, 8, 8)
                    .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addComponent(panel4, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(panel5, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                            .addGap(10, 10, 10)
                            .addComponent(panel6, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(panel7, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                            .addComponent(panel8, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(Step4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(Step5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Step6))
                        .addComponent(scrollpane9, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {panel2, panel3, panel6});

    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(panel4, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(panel5, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                    .addComponent(panel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER, false)
                                .addComponent(panel8, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(panel7, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(scrollpane9, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Step4)
                                .addComponent(Step5)
                                .addComponent(Step6)))))
                .addGroup(layout.createSequentialGroup()
                    .addGap(15, 15, 15)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );

    layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {panel2, panel3, panel6});

    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    setBounds((screenSize.width-1563)/2, (screenSize.height-904)/2, 1563, 904);
    }// </editor-fold>//GEN-END:initComponents

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_CloseButtonActionPerformed

    private void CreateNewPopulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateNewPopulationButtonActionPerformed

                NbreIteration++;
                individuSelect = getIndividuSelect(individuSelect);
                CrossOverPopulation = GetSelectedIndividus(individuSelect);
                try {
                    CrossOver(CrossOverPopulation);
                } catch (Exception ex) {
                    Logger.getLogger(VRMinerVisualAssistant_IGA.class.getName()).log(Level.SEVERE, null, ex);
                }
                IndividuSelectInitialisation();
                
    }//GEN-LAST:event_CreateNewPopulationButtonActionPerformed

    private void CreateFinalProfilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateFinalProfilButtonActionPerformed
        
        try {
            /* pour chaque individu séléctionner créer un noeud profil dans le noeud nuage3D du noeud visualization,
             le numéro du profil sert juste à récuperer le profil mais pas à le créer
             */
            individuSelect = getIndividuSelect(individuSelect);
            for(int j=0; j<individuSelect.length; j++){
                if(individuSelect[j]){
                    File f = new File(XMLfilepathName);
                    SaveSelectedProfil(f, "profil"+j);
                    enregistreFichier(XMLfilepathName);
                }
            }
            //new ApplyNewConfiguration(XMLfilepathName, indiceSelectedProfil);
        } catch (Exception ex) {
            Logger.getLogger(VRMinerVisualAssistant.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CreateFinalProfilButtonActionPerformed

    private void CheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBox1ItemStateChanged
        if(CheckBox1.isSelected()){
            individuSelect[0] = true;
            Step5.setEnabled(true);
            CreateFinalProfilButton.setEnabled(true);
        } else {
            individuSelect[0] = false;
            individuSelect = getIndividuSelect(individuSelect);
            state = isState(individuSelect);
            if(state==false){
              Step5.setEnabled(false);
              CreateFinalProfilButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_CheckBox1ItemStateChanged

    private void CheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBox2ItemStateChanged
        if(CheckBox2.isSelected()){
            individuSelect[1] = true;
            Step5.setEnabled(true);
            CreateFinalProfilButton.setEnabled(true);
        } else {
            individuSelect[1] = false;
            individuSelect = getIndividuSelect(individuSelect);
            state = isState(individuSelect);
            if(state==false){
              Step5.setEnabled(false);
              CreateFinalProfilButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_CheckBox2ItemStateChanged

    private void CheckBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBox3ItemStateChanged
       if(CheckBox3.isSelected()){
            individuSelect[2] = true;
            Step5.setEnabled(true);
            CreateFinalProfilButton.setEnabled(true);
        } else {
            individuSelect[2] = false;
            individuSelect = getIndividuSelect(individuSelect);
            state = isState(individuSelect);
            if(state==false){
              Step5.setEnabled(false);
              CreateFinalProfilButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_CheckBox3ItemStateChanged

    private void CheckBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBox4ItemStateChanged
        if(CheckBox4.isSelected()){
            individuSelect[3] = true;
            Step5.setEnabled(true);
            CreateFinalProfilButton.setEnabled(true);
        } else {
            individuSelect[3] = false;
            individuSelect = getIndividuSelect(individuSelect);
            state = isState(individuSelect);
            if(state==false){
              Step5.setEnabled(false);
              CreateFinalProfilButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_CheckBox4ItemStateChanged

    private void CheckBox5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBox5ItemStateChanged
        if(CheckBox5.isSelected()){
            individuSelect[4] = true;
            Step5.setEnabled(true);
            CreateFinalProfilButton.setEnabled(true);
        } else {
            individuSelect[4] = false;
            individuSelect = getIndividuSelect(individuSelect);
            state = isState(individuSelect);
            if(state==false){
              Step5.setEnabled(false);
              CreateFinalProfilButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_CheckBox5ItemStateChanged

    private void CheckBox6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBox6ItemStateChanged
        if(CheckBox6.isSelected()){
            individuSelect[5] = true;
            Step5.setEnabled(true);
            CreateFinalProfilButton.setEnabled(true);
        } else {
            individuSelect[5] = false;
            individuSelect = getIndividuSelect(individuSelect);
            state = isState(individuSelect);
            if(state==false){
              Step5.setEnabled(false);
              CreateFinalProfilButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_CheckBox6ItemStateChanged

    private void CheckBox7ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBox7ItemStateChanged
        if(CheckBox7.isSelected()){
            individuSelect[6] = true;
            Step5.setEnabled(true);
            CreateFinalProfilButton.setEnabled(true);
        } else {
            individuSelect[6] = false;
            individuSelect = getIndividuSelect(individuSelect);
            state = isState(individuSelect);
            if(state==false){
              Step5.setEnabled(false);
              CreateFinalProfilButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_CheckBox7ItemStateChanged

    private void CheckBox8ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CheckBox8ItemStateChanged
        if(CheckBox8.isSelected()){
            individuSelect[7] = true;
            Step5.setEnabled(true);
            CreateFinalProfilButton.setEnabled(true);
        } else {
            individuSelect[7] = false;
            individuSelect = getIndividuSelect(individuSelect);
            state = isState(individuSelect);
            if(state==false){
              Step5.setEnabled(false);
              CreateFinalProfilButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_CheckBox8ItemStateChanged

    public void initialisationNuage3DEmpty() throws Exception{
          
        if(visu3D1!=null){
            visu3D1.destroy();
            visu3D1 = null;
            Runtime.getRuntime().gc();
            Runtime.getRuntime().runFinalization();
            Runtime.getRuntime().gc();
        }
        if(visu3D2!=null){
            visu3D2.destroy();
            visu3D2 = null;
            Runtime.getRuntime().gc();
            Runtime.getRuntime().runFinalization();
            Runtime.getRuntime().gc();
        }
        if(visu3D3!=null){
            visu3D3.destroy();
            visu3D3 = null;
            Runtime.getRuntime().gc();
            Runtime.getRuntime().runFinalization();
            Runtime.getRuntime().gc();
        }
        if(visu3D4!=null){
            visu3D4.destroy();
            visu3D4 = null;
            Runtime.getRuntime().gc();
            Runtime.getRuntime().runFinalization();
            Runtime.getRuntime().gc();
        }
        if(visu3D5!=null){
            visu3D5.destroy();
            visu3D5 = null;
            Runtime.getRuntime().gc();
            Runtime.getRuntime().runFinalization();
            Runtime.getRuntime().gc();
        }
        if(visu3D6!=null){
            visu3D6.destroy();
            visu3D6 = null;
            Runtime.getRuntime().gc();
            Runtime.getRuntime().runFinalization();
            Runtime.getRuntime().gc();
        }
        if(visu3D7!=null){
            visu3D7.destroy();
            visu3D7 = null;
            Runtime.getRuntime().gc();
            Runtime.getRuntime().runFinalization();
            Runtime.getRuntime().gc();
        }
        if(visu3D8!=null){
            visu3D8.destroy();
            visu3D8 = null;
            Runtime.getRuntime().gc();
            Runtime.getRuntime().runFinalization();
            Runtime.getRuntime().gc();
        }
        if(visu3D9!=null){
            visu3D9.destroy();
            visu3D9 = null;
            Runtime.getRuntime().gc();
            Runtime.getRuntime().runFinalization();
            Runtime.getRuntime().gc();
        }


    }

    public void initialisationNuage3D() throws Exception{

        visu3D1 = new Visualisation_Nuage_3D(0, 0, 0);
        visu3D2 = new Visualisation_Nuage_3D(0, 0, 0);
        visu3D3 = new Visualisation_Nuage_3D(0, 0, 0);
        visu3D4 = new Visualisation_Nuage_3D(0, 0, 0);
        visu3D5 = new Visualisation_Nuage_3D(0, 0, 0);
        visu3D6 = new Visualisation_Nuage_3D(0, 0, 0);
        visu3D7 = new Visualisation_Nuage_3D(0, 0, 0);
        visu3D8 = new Visualisation_Nuage_3D(0, 0, 0);
        visu3D9 = new Visualisation_Nuage_3D(0, 0, 0);
        
    }

    public void initialisation() throws Exception{

        individuSelect = new boolean[PopulationSize];
        for(int i=0; i<individuSelect.length; i++){
            individuSelect[i] = false;
        }

    }

    public boolean isState(boolean[] individuSelect) {

        state = false;
        for(int i=0; i<individuSelect.length; i++){
            if(individuSelect[i] == true){
                state = true;
            }
        }
        
        return state;
    }

    public List<Integer> TirageAleatoire(int individu) throws Exception{

        int insertedValue = 0;
        //initialisation du vecteur contenant la position des gèens qui subiront la mutation lors de l'itération aléatoire
        List<Integer> liste = new ArrayList<Integer>();
        while (insertedValue < individu) {
        Integer random = new Integer((int) Math.ceil(Math.random() * individu));
        if(!liste.contains(random-1)) {
        liste.add(random-1);
        insertedValue++;
        }
        }
        return liste;
    }

    public List<Visualisation> CreateInitialIndividual(List<Appariement> MECResultat) throws Exception{
        List<Visualisation> population = new ArrayList<Visualisation>();
        for(int i=0; i<MECResultat.size(); i++){
           Visualisation visu = new Visualisation();
           visu.setName(MECResultat.get(i).getName_data());
           String o = MECResultat.get(i).getName_data().toString();
           visu.setType(MECResultat.get(i).getType_data());
           visu.setImportance(MECResultat.get(i).getImportance_data());
           population.add(visu);
        }
        return population;
    }

    public List<Visualisation> CreateDataAttributeList(List<Appariement> MECResultat) throws Exception{
        List<Visualisation> population = new ArrayList<Visualisation>();
        for(int i=0; i<MECResultat.size(); i++){
           Visualisation visu = new Visualisation();
           visu.setName(MECResultat.get(i).getName_data());
           visu.setType(MECResultat.get(i).getType_data());
           visu.setImportance(MECResultat.get(i).getImportance_data());
           population.add(visu);
        }
        return population;
    }

    public List<Visualisation> CreateVisualAttributeList(List<Appariement> MECResultat) throws Exception{
        List<Visualisation> population = new ArrayList<Visualisation>();
        for(int i=0; i<MECResultat.size(); i++){
           Visualisation visu = new Visualisation();
           visu.setName(MECResultat.get(i).getName_v_data());
           visu.setType(MECResultat.get(i).getType_v_data());
           visu.setImportance(MECResultat.get(i).getImportance_v_data());
           population.add(visu);
        }
        return population;
    }

    public List<Visualisation> FillingIntialIndividual(List<Visualisation> OldInitialIndividual, List<Visualisation> Choosen_Individual_Value) throws Exception{
        //List<Visualisation> InitialIndividualMatchnig = new ArrayList<Visualisation>();
        for(int i=0; i<Choosen_Individual_Value.size(); i++){
           for(int j=0; j<OldInitialIndividual.size(); j++){
           if(OldInitialIndividual.get(j).getName().equals(Choosen_Individual_Value.get(i).getName())){
           /* Modification des valeurs de l'importance de l'attribut de données */
           //InitialIndividualMatchnig.add(i, Choosen_Individual_Value.get(i));
           OldInitialIndividual.add(i, Choosen_Individual_Value.get(i));
           /* supprimer l'individu positionner dans la place de celui déjà sélectionné */
           OldInitialIndividual.remove(i+1);
           }
//           else {
//               InitialIndividualMatchnig.add(Choosen_Individual_Value.get(i));
//           }
           }
        }
        //InitialIndividualMatchnig = getNewMatchingResult(OldInitialIndividual, Initial_v_attribte);
        OldInitialIndividual = new Matching().getListeTri(OldInitialIndividual);
        return OldInitialIndividual;
    }

    public List<List<Appariement>> GenererInitialPopulation(List<Visualisation> DataAttributeChromosome, List<Visualisation> visualAttributeChromosome) throws Exception {

        /* initialisation de la nouvelle population */
        List<List<Appariement>> Nouvelle_Population = new ArrayList<List<Appariement>>();
        /* initialisation de l'indice qui permet de parcourir la population */
        int insertedValues = 0;
        System.out.println("vecTirageAleatoire : "+DataAttributeChromosome.size());
        
        while (insertedValues < PopulationSize) {
            /* probabilité de mutation pour chaque individu */
            double P = (Math.random() * 0.10);
            /* probabilité de mutation pour chaque gène */
            double Pmute = RandomValue();
            /* initilisation du nouveau vecteur individu  */
            List<Visualisation> fils = new ArrayList<Visualisation>();
            /* initilisation du nouveau vecteur matching de l'individu */
            List<Appariement> filsMEC = new ArrayList<Appariement>();
            /* Si P?0.01,  Choisir un géne aléatoirement de l'individu et modifier son poids */
            if(P<=0.04){
            System.out.println("True");
            System.out.println("Pmute = "+Pmute);
            /* générer un indice aléatoire pour choisir le géne de l'individu à muter  */
            Integer random = new Integer((int) Math.ceil(Math.random() * DataAttributeChromosome.size()-1));
            /* parcourir tous les gènes de l'individu */
            for(int i=0; i<DataAttributeChromosome.size(); i++){
                Visualisation newInd = new Visualisation();
                newInd.setName(DataAttributeChromosome.get(i).getName());
                newInd.setType(DataAttributeChromosome.get(i).getType());
                /* vérifier si l'indice du gène actuel correspond à l'indice tiré aléatoirement */
                if(i == random){
                //int NewValue = NON_UniformMutation_Operator(chromosome.get(Integer.valueOf(vecTirageAleatoire.get(i).toString())).getImportance());
                //int NewValue = (int) MutationOperator(DataAttrbuteChromosome.get(Integer.valueOf(vecTirageAleatoire.get(i).toString())).getImportance());
                /* appliquer une mutation au gène actuel */
                int NewValue = (int) ((DataAttributeChromosome.get(i).getImportance()) * Pmute);
                //newInd.setImportance((DataAttrbuteChromosome.get(i).getImportance()) * (Pmute));
                //int NewValue = (int) ((DataAttrbuteChromosome.get(Integer.valueOf(vecTirageAleatoire.get(i).toString())).getImportance()) * (Pmute));
                newInd.setImportance(NewValue);
                } else{
                newInd.setImportance(DataAttributeChromosome.get(i).getImportance());
                }
                fils.add(newInd);
            }
            
            /* Trier le nouveau paramétrage du vecteur des attributs de données générer après mutation */
            fils  = new Matching().getListeTri(fils);
            for(int j =0; j<fils.size(); j++){
                System.out.println(fils.get(j).getName()+" : "+fils.get(j).getImportance());
            }
            /*Mise en correspondance attributs de données et attributs visuels */
            filsMEC  = getNewMatchingResult(fils, visualAttributeChromosome);
            for(int j =0; j<filsMEC.size(); j++){
                System.out.println(filsMEC.get(j).getName_data()+" : "+filsMEC.get(j).getImportance_data()+" ::: "+filsMEC.get(j).getName_v_data());
            }
            } else{
                System.out.println("False");
                for(int i=0; i<DataAttributeChromosome.size(); i++){
                Visualisation newInd = new Visualisation();
                newInd.setName(DataAttributeChromosome.get(i).getName());
                newInd.setType(DataAttributeChromosome.get(i).getType());
                newInd.setImportance(DataAttributeChromosome.get(i).getImportance());
                fils.add(newInd);
            }
            /*Mise en correspondance attributs de données et attributs visuels */
            filsMEC  = getNewMatchingResult(fils, visualAttributeChromosome);
            
            }
            Nouvelle_Population.add(filsMEC);
            insertedValues++;
          }
          return Nouvelle_Population;
    }

    public List<List<Visualisation>> GenererNewPopulation(List<Visualisation> DataAttrbuteChromosome) throws Exception {
        List<List<Visualisation>> Nouvelle_Population = new ArrayList<List<Visualisation>>();
        /* initialisation de l'indice qui permet de parcourir la population */
        int insertedValues = 0;
        while (insertedValues < PopulationSize) {
            /* probabilité de mutation pour chaque individu */
            double P = (Math.random() * 0.10);
            /* probabilité de mutation pour chaque gène */
            double Pmute = RandomValue();
            /* initilisation du nouveau vecteur individu  */
            List<Visualisation> fils = new ArrayList<Visualisation>();
            /* initilisation du nouveau vecteur matching de l'individu */
            List<Appariement> filsMEC = new ArrayList<Appariement>();
            /* Si P?0.01,  Choisir un géne aléatoirement de l'individu et modifier son poids */
            if(P<=0.04){
            System.out.println("True");
            System.out.println("Pmute = "+Pmute);
            /* générer un indice aléatoire pour choisir le géne de l'individu à muter  */
            Integer random = new Integer((int) Math.ceil(Math.random() * DataAttrbuteChromosome.size()-1));
            /* parcourir tous les gènes de l'individu */
            for(int i=0; i<DataAttrbuteChromosome.size(); i++){
                Visualisation newInd = new Visualisation();
                newInd.setName(DataAttrbuteChromosome.get(i).getName());
                newInd.setType(DataAttrbuteChromosome.get(i).getType());
                /* vérifier si l'indice du gène actuel correspond à l'indice tiré aléatoirement */
                if(i == random){
                //int NewValue = NON_UniformMutation_Operator(chromosome.get(Integer.valueOf(vecTirageAleatoire.get(i).toString())).getImportance());
                //int NewValue = (int) MutationOperator(DataAttrbuteChromosome.get(Integer.valueOf(vecTirageAleatoire.get(i).toString())).getImportance());
                /* appliquer une mutation au gène actuel */
                int NewValue = (int) ((DataAttrbuteChromosome.get(i).getImportance()) * Pmute);
                //newInd.setImportance((DataAttrbuteChromosome.get(i).getImportance()) * (Pmute));
                //int NewValue = (int) ((DataAttrbuteChromosome.get(Integer.valueOf(vecTirageAleatoire.get(i).toString())).getImportance()) * (Pmute));
                newInd.setImportance(NewValue);
                } else{
                newInd.setImportance(DataAttrbuteChromosome.get(i).getImportance());
                }
                fils.add(newInd);

            }
            for(int j =0; j<fils.size(); j++){
                System.out.println(fils.get(j).getName()+" : "+fils.get(j).getImportance());
            }
            /* Trier le nouveau paramétrage du vecteur des attributs de données générer après mutation */
            fils  = new Matching().getListeTri(fils);
            for(int j =0; j<fils.size(); j++){
                System.out.println(fils.get(j).getName()+" : "+fils.get(j).getImportance());
            }

            filsMEC  = getNewMatchingResult(fils, Initial_v_attribte);
            } else{
                System.out.println("False");
                for(int i=0; i<DataAttrbuteChromosome.size(); i++){
                Visualisation newInd = new Visualisation();
                newInd.setName(DataAttrbuteChromosome.get(i).getName());
                newInd.setType(DataAttrbuteChromosome.get(i).getType());
                newInd.setImportance(DataAttrbuteChromosome.get(i).getImportance());
                fils.add(newInd);
            }
            }
            Nouvelle_Population.add(fils);
            insertedValues++;
          }

          return Nouvelle_Population;
    }

    public double RandomValue(){
        double lower = 0.1;
        double higher = 0.5;
        double importance = 0.4;
        double random = (Math.random() * (higher-lower))+importance;
        System.out.println("Random Value : "+random);

        return random;
    }

    public static void PmGenerator(double Num_of_Selec_Ind, double Size_Selec_Ind){
       double tailleP = 8;
        double Pm = (double) (Math.random());
        System.out.println("La probabilité de mutation est :   "+Pm);
        System.out.println("La probabilité pour muter est :   "+(1/tailleP));
        if(Pm<=(1/tailleP)){
            System.out.println("Mutation Permise");
        } else {
            System.out.println("Mutation non Permise");
        }
    }

    public double MutationOperator(int OldValue){

        double higher = 20, low = 10, PmuteRate, Pmute, NoiseValue, NewValue, RandomValue;
        Random r;


        r = new Random();
        //PmuteRate = Math.abs(r.nextDouble());
        RandomValue = (Math.random() * 1);
        Pmute = Math.random() * (-higher)+low;
        NoiseValue = (int) ((RandomValue - 0.5) + 2 * Pmute);
        NewValue = OldValue + NoiseValue;
    //    if(PmuteRate <= 0.1) {
    //    NewValue = OldValue + NoiseValue;
    //    }
        if(NewValue>100){
             NewValue = 100;
        }
        if(NewValue<0){
             NewValue = 0;
        }

        return NewValue;

    }

    public int NON_UniformMutation_Operator(int OldValue){

        int NewValue = 0;
        double higher = 20, low = 10, delta, u, RandomRateValue, alpha;
        boolean MutationType = false; // Si MuMutationType = false  Y' = Y + Delta (t, r(k)-y) *** Si MuMutationType = false  Y' = Y - Delta (t, y - r(k))
        Random rand;

        alpha = NbreIteration/MaxIteration;
        rand = new Random();
        MutationType = rand.nextBoolean();
        u = Math.random() * 1;
        RandomRateValue = Math.random() * (-higher)+low;
        delta = (u - 0.5)+ 2*RandomRateValue;
        if(MutationType) {
        NewValue = (int) (OldValue - ((OldValue - RandomRateValue) * u * (1 - alpha)));
        
        } else {
        NewValue = (int) (OldValue + (( RandomRateValue - OldValue) * u * (1 - alpha)));
        }
        if(NewValue>100){
             NewValue = 100;
        }
        if(NewValue<0){
             NewValue = 0;
        }
        return NewValue;

    }

    public List<MEC> getNewMatching(List<Visualisation> newMatch){

        for(int i=0; i<newMatch.size(); i++){
        MEC indivMec = new MEC();
        indivMec.setData_attribute(newMatch.get(i).getName());
        indivMec.setVisual_attribute(MatchingResultInitiale.get(i).getName_v_data());
        mec1.add(indivMec);
        }
        return mec1;
    }

    public List<Appariement> getNewMatchingResult(List<Visualisation> DataAttribute, List<Visualisation> VisualDataAttribute) throws Exception{

        List<Appariement> MatchingListResult = new ArrayList<Appariement>();
        for(int i=0; i<VisualDataAttribute.size(); i++){
            a : for(int j=0; j<DataAttribute.size(); j++){
            if(VisualDataAttribute.get(i).getType().toString().equals(DataAttribute.get(j).getType())){
            Appariement indivMec = new Appariement();
            indivMec.setName_v_data(VisualDataAttribute.get(i).getName());
            indivMec.setType_v_data(VisualDataAttribute.get(i).getType());
            indivMec.setImportance_v_data(VisualDataAttribute.get(i).getImportance());
            indivMec.setName_data(DataAttribute.get(j).getName());
            indivMec.setType_data(DataAttribute.get(j).getType());
            indivMec.setImportance_data(DataAttribute.get(j).getImportance());
            MatchingListResult.add(indivMec);
            DataAttribute.remove(j);
            break a;
            }
            }
        }
        return MatchingListResult;

    }

    public void AfficherIndividus(final String XMLFilepath) throws Exception {

        initialisationNuage3DEmpty();
        initialisationNuage3D();
        visu3D1.ConfigurationNuage3D(XMLFilepath, "profil"+0);
        visu3D1.createScene();
        scrollpane1.setViewportView(visu3D1.getCustomCanvas3D());

        visu3D1.addPointOfViewListener(visu3D1.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        @Override
        public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
        updatePreview(XMLFilepath,0);//afficher le profil i : qui est passé en paramètre
        }
        });

        visu3D2.ConfigurationNuage3D(XMLFilepath, "profil"+1);
        visu3D2.createScene();
        scrollpane2.setViewportView(visu3D2.getCustomCanvas3D());
        visu3D2.addPointOfViewListener(visu3D2.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        @Override
        public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
        updatePreview(XMLFilepath,1);//afficher le profil i : qui est passé en paramètre
        }
        });

        visu3D3.ConfigurationNuage3D(XMLFilepath, "profil"+2);
        visu3D3.createScene();
        scrollpane3.setViewportView(visu3D3.getCustomCanvas3D());
        visu3D3.addPointOfViewListener(visu3D3.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        @Override
        public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
        updatePreview(XMLFilepath,2);//afficher le profil i : qui est passé en paramètre
        }
        });

        visu3D4.ConfigurationNuage3D(XMLFilepath, "profil"+3);
        visu3D4.createScene();
        scrollpane4.setViewportView(visu3D4.getCustomCanvas3D());
        visu3D4.addPointOfViewListener(visu3D4.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        @Override
        public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
        updatePreview(XMLFilepath,3);//afficher le profil i : qui est passé en paramètre
        }
        });

        visu3D5.ConfigurationNuage3D(XMLFilepath, "profil"+4);
        visu3D5.createScene();
        scrollpane5.setViewportView(visu3D5.getCustomCanvas3D());
        visu3D5.addPointOfViewListener(visu3D5.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        @Override
        public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
        updatePreview(XMLFilepath,4);//afficher le profil i : qui est passé en paramètre
        }
        });

        visu3D6.ConfigurationNuage3D(XMLFilepath, "profil"+5);
        visu3D6.createScene();
        scrollpane6.setViewportView(visu3D6.getCustomCanvas3D());
        visu3D6.addPointOfViewListener(visu3D6.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        @Override
        public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
        updatePreview(XMLFilepath,5);//afficher le profil i : qui est passé en paramètre
        }
        });

        visu3D7.ConfigurationNuage3D(XMLFilepath, "profil"+6);
        visu3D7.createScene();
        scrollpane7.setViewportView(visu3D7.getCustomCanvas3D());
        visu3D7.addPointOfViewListener(visu3D7.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        @Override
        public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
        updatePreview(XMLFilepath,6);//afficher le profil i : qui est passé en paramètre
        }
        });

        visu3D8.ConfigurationNuage3D(XMLFilepath, "profil"+7);
        visu3D8.createScene();
        scrollpane8.setViewportView(visu3D8.getCustomCanvas3D());
        visu3D8.addPointOfViewListener(visu3D8.getMainPointOfView().getName(), new PointOfViewMouseAdapter() {
        @Override
        public void onMouseLeftClick(MouseEvent m, PointOfView p, Object3D o){
        updatePreview(XMLFilepath,7);//afficher le profil i : qui est passé en paramètre
        }
        });

 
    }

    public DefaultTableModel Affichage(DefaultTableModel individu, List<Appariement> Matching, List<Visualisation> chromosomes) throws Exception{
         chromosomes = new Matching().getListeTri(chromosomes);
         individu.setRowCount(0);
        for(int i=0; i<chromosomes.size(); i++){
            individu.addRow(new Object[]{Matching.get(i).getName_v_data(), chromosomes.get(i).getName(), chromosomes.get(i).getImportance()});
        }
        return individu;
        //affecter le nouveau résultat pour l'afficher sur l'interface
    }

    public void IndividuSelectInitialisation(){
       /* Initialisation du vecteur des individus sélectionnées */
       individuSelect = new boolean[PopulationSize];
        for(int i=0; i<individuSelect.length; i++){
            individuSelect[i] = false;
        }
       
     }

    public boolean[] getIndividuSelect(boolean [] indSelect) {

        if(CheckBox1.isSelected()){
            indSelect[0] = true;
            //nbIndivSelect = nbIndivSelect+1;
            indiceSelectedProfil = 0;
        }
        if(CheckBox2.isSelected()){
            indSelect[1] = true;
            //nbIndivSelect = nbIndivSelect+1;
            indiceSelectedProfil = 1;
        }
        if(CheckBox3.isSelected()){
            indSelect[2] = true;
            //nbIndivSelect = nbIndivSelect+1;
            indiceSelectedProfil = 2;
        }
        if(CheckBox4.isSelected()){
            indSelect[3] = true;
            //nbIndivSelect = nbIndivSelect+1;
            indiceSelectedProfil = 3;
        }
        if(CheckBox5.isSelected()){
            indSelect[4] = true;
            //nbIndivSelect = nbIndivSelect+1;
            indiceSelectedProfil = 4;
        }
        if(CheckBox6.isSelected()){
            indSelect[5] = true;
            //nbIndivSelect = nbIndivSelect+1;
            indiceSelectedProfil = 5;
        }
        if(CheckBox7.isSelected()){
            indSelect[6] = true;
            //nbIndivSelect = nbIndivSelect+1;
            indiceSelectedProfil = 6;
        }
        if(CheckBox8.isSelected()){
            indSelect[7] = true;
            //nbIndivSelect = nbIndivSelect+1;
            indiceSelectedProfil = 7;
        }

        return indSelect;
    }

    public List<List<Appariement>> GetSelectedIndividus(boolean [] individuSelect){

        int nbSelectionnes =0;
        List<List<Appariement>> bufferPopulation = new ArrayList<List<Appariement>>();
        newPopulation = new ArrayList<List<Appariement>>();
        for (int i = 0; i < individuSelect.length; i++) {
            if(individuSelect[i]) {
                nbSelectionnes++;
                newPopulation.add(i, InitialPopulation.get(i));
                bufferPopulation.add(InitialPopulation.get(i));
             }
            else {
                newPopulation.add(i, null);
             }
        }
        System.out.println("Le nombre d'individus sélectionnées est de : "+bufferPopulation.size());

        return bufferPopulation;
    }

    public void CrossOver(List<List<Appariement>> Newpop) throws Exception{

       /*Generer une nouvelle population aléatoirement*/
       if (Newpop.isEmpty()){
            System.out.println("Aucun individu n'est sélectionné !");
            /* Génerer un nouveau paramétrage pour le vecteur des attributs de données -
             - possibilité d'apparaissant d'un attributs non important dans la population précédante -
             - La cause est qu'un opérateur de mutation permet de modifier légerement le poids des attributs de données
             - Alors, possibilité d'augmenter de réduire le poids et apparaissiant après opération de tri */
            Integer randomIndividual = new Integer((int) Math.ceil(Math.random() * InitialPopulation.size()-1));
            double random = (Math.random() * (0.5));
            if(random<Pfilling){
              List<Visualisation> Choosen_Individual = CreateDataAttributeList(InitialPopulation.get(randomIndividual));  
              /* filling initial data attribute vector which contain all data attribute */
              ListInitialDataAttribute = FillingIntialIndividual(ListInitialDataAttribute, Choosen_Individual);
              ListDataAttribute = ListInitialDataAttribute;
              /* extract new data attribute vector with matching process*/
              //NewMatchingIndividualResult = getNewMatchingResult(ListDataAttribute, Initial_v_attribte);
              //Initial_v_attribte = CreateVisualAttributeList(NewMatchingIndividualResult);
              Initial_d_attribte = CreateDataAttributeList(NewMatchingIndividualResult);

         }
            ListDataAttribute = ListInitialDataAttribute;
            /* supprimer le contenu de la population précédante */
            InitialPopulation.removeAll(InitialPopulation);
            /* génerer une nouvelle population avec le nouveau paramétrage du vecteur des attributs de données */
            InitialPopulation = GenererInitialPopulation(Initial_d_attribte, Initial_v_attribte);
            /* génerer le vecteur de mise en correspondance de la nouvelle population avec le nouveau paramétrage du vecteur des attributs de données */
            /* Modification du paramétrage des individus (profils) de la population dans le fichier XML */
            for(int i =0; i<PopulationSize; i++){
            ReadXMLFileGA(XMLfilepathName, i);
            UpdateElement_InitialPopulation(Individual_Size, InitialPopulation, i);
            //UpdateElement(Initial_v_attribte, InitialPopulation, i);
            enregistreFichier(XMLfilepathName);
            }
            AfficherIndividus(XMLfilepathName);
        }

       /* Generer une nouvelle population à partir de l'individu sélectionnés en utilisant un opérateur de mutation sur les génes de l'individus sélectionné */
       if(Newpop.size()== 1){
          System.out.println("un seul individu est sélectionné !");
          /* supprimer le contenu de la population précédante */
          InitialPopulation.removeAll(InitialPopulation);
          /* Récuperer la liste des attributs de données de l'individu sélectionné : l'indice "0" est utilisé puisque la liste contiend qu'un seul individu */
          Initial_d_attribte = CreateDataAttributeList(Newpop.get(0));
          /* muter l'individu sélectionnée pour créer les n-1 individus de la nouvelle population */
          /* génerer une nouvelle population avec le nouveau paramétrage du vecteur des attributs de données */
          InitialPopulation = GenererInitialPopulation(Initial_d_attribte, Initial_v_attribte);
          /* Repositionner l'individu sélectionner dans la même place que dans la population précédante */
          for (int i = 0; i < InitialPopulation.size(); i++) {
          if(individuSelect[i]){
           /* Repositionner l'individu sélectionner dans la même place que dans la population précédante */
           InitialPopulation.add(i, Newpop.get(0));
           /* supprimer l'individu positionner dans la place de celui déjà sélectionné */
           InitialPopulation.remove(i+1);
          }
          }
          //NewMatchingIndividualResult = getNewMatchingResult(Initial_d_attribte, Initial_v_attribte);
          
          /* Modification du paramétrage des individus (profils) de la population dans le fichier XML */
          for(int i =0; i<PopulationSize; i++){
            ReadXMLFileGA(XMLfilepathName, i);
            UpdateElement_InitialPopulation(Individual_Size, InitialPopulation, i);
            //UpdateElement(ListVisualaAttribute, InitialPopulation, i);
            enregistreFichier(XMLfilepathName);
          }
          AfficherIndividus(XMLfilepathName);
        }

       /* Generer une nouvelle population à partir des individus sélectionnés avec l'opérateur de croisement puis de mutation */
       if(Newpop.size()>=2){
           System.out.println(Newpop.size()+" individus sont sélectionnées !");
           InitialPopulation.removeAll(InitialPopulation);
           /* Choisir le premier indice pour sélectionner l'individu pere parmi les individus séléctionnées */
           Integer random = new Integer((int) Math.ceil(Math.random() * Newpop.size()-1));
           System.out.println("Random Value : "+random);
           /* Choisir le deuxième indice pour sélectionner l'individu mere parmi les individus séléctionnées */
           Integer random1 = new Integer((int) Math.ceil(Math.random() * Newpop.size()-1));
           /* Vérifier que le deuxième indice sélectionné n'est pas égale au premier individus séléctionné */
           while(random==random1){
             random1 = new Integer((int) Math.ceil(Math.random() * Newpop.size()));
           }
           System.out.println("Random1 Value : "+random1);
           /* probabilité de croisement pour chaque gène */
           double Pcross = (Math.random() * 0.10);
           /* Si Pcross?0.01,  Executer le croisement sur les individus séléctionnées */
           if(Pcross<=0.04){
           /* Faire le croisement */
           List<List<Appariement>> PopUniformeCross = CrossOverOnePoint(Newpop.get(random), Newpop.get(random1));
           Integer random2 = new Integer((int) Math.ceil(Math.random() * PopUniformeCross.size()-1));
           Initial_d_attribte = CreateDataAttributeList(PopUniformeCross.get(random2));
           //v_attribte = CreateVisualAttributeList(PopUniformeCross.get(random2));
           //NewMatchingIndividualResult.removeAll(NewMatchingIndividualResult);
           //NewMatchingIndividualResult = this.getNewMatchingResult(d_attribte, v_attribte);
           InitialPopulation = GenererInitialPopulation(Initial_d_attribte, Initial_v_attribte);
           int n = 0;
           for (int i = 0; i < InitialPopulation.size(); i++) {
           if((individuSelect[i])&&(n<=Newpop.size())){
           //Repositionner l'individu sélectionner dans la même place que dans la population précédante
           InitialPopulation.add(i, Newpop.get(n));
           //supprimer l'individu positionner dans la place de celui déjà sélectionné
           InitialPopulation.remove(i+1);
           n++;
          }
          }
          //Modification des gènes de chaque individus de la population après application des opérateurs génétique
           for(int i =0; i<PopulationSize; i++){
            ReadXMLFileGA(XMLfilepathName, i);
            UpdateElement_InitialPopulation(Individual_Size, InitialPopulation, i);
            //UpdateElement(ListVisualaAttribute, InitialPopulation, i);
            enregistreFichier(XMLfilepathName);
          }
          AfficherIndividus(XMLfilepathName);
       } 
       else{
           /* Ne pas faire de croisement */
           //List<List<Appariement>> PopUniformeCross = CrossOverOnePoint(Newpop.get(random), Newpop.get(random1));
           Integer random3 = new Integer((int) Math.ceil(Math.random() * Newpop.size()-1));
           Initial_d_attribte = CreateDataAttributeList(Newpop.get(random3));
           InitialPopulation = GenererInitialPopulation(Initial_d_attribte, Initial_v_attribte);
           int n = 0;
           for (int i = 0; i < InitialPopulation.size(); i++) {
           if((individuSelect[i])&&(n<=Newpop.size())){
           //Repositionner l'individu sélectionner dans la même place que dans la population précédante
           InitialPopulation.add(i, Newpop.get(n));
           //supprimer l'individu positionner dans la place de celui déjà sélectionné
           InitialPopulation.remove(i+1);
           n++;
          }
          }
          //Modification des gènes de chaque individus de la population après application des opérateurs génétique
           for(int i =0; i<PopulationSize; i++){
            ReadXMLFileGA(XMLfilepathName, i);
            UpdateElement_InitialPopulation(Individual_Size, InitialPopulation, i);
            //UpdateElement(ListVisualaAttribute, InitialPopulation, i);
            enregistreFichier(XMLfilepathName);
          }
          AfficherIndividus(XMLfilepathName);

       }
       } 

        if (Newpop.size()==InitialPopulation.size()){
            IndividuSelectInitialisation();
            JOptionPane.showMessageDialog(new JOptionPane(), "You have selected all individual of Population!, You can not Generate New population?", "Error Message", JOptionPane.WARNING_MESSAGE);
            AfficherIndividus(XMLfilepathName);
        }


    }

    public List<List<Visualisation>> Mutation(List<List<Visualisation>> pop, boolean[] SelectIndividuals ) throws Exception{
        List<List<Visualisation>> MutationPopulation = new ArrayList<List<Visualisation>>();
        Integer random = new Integer((int) Math.ceil(Math.random() * pop.size()));
        for (int i = 0; i < individuSelect.length; i++) {
        if(individuSelect[i]) {
            MutationPopulation.remove(i);
            MutationPopulation.add(i, pop.get(random));
        }
        }
        //MutationPopulation = GenererInitialPopulation(pop.get(random));

        return MutationPopulation;
    }

    public List<List<Appariement>> CrossOverOnePoint (List<Appariement> chromosome1, List<Appariement> chromosome2) {

            List<List<Appariement>> NewChild = new ArrayList<List<Appariement>>();
            int pos;
            List<Appariement> child, child1;
            child = new ArrayList<Appariement>();
            child1 = new ArrayList<Appariement>();
            pos =(int) (Math.random()*chromosome1.size());
            System.out.println("Position de croisement : "+pos);
            child.addAll(chromosome1.subList(0,pos));
            child1.addAll(chromosome2.subList(0,pos));
            child.addAll(chromosome2.subList(pos,chromosome2.size()));
            child1.addAll(chromosome1.subList(pos,chromosome2.size()));

            for(int i=0; i<child.size(); i++){
                System.out.println("First Child : "+child.get(i).toString());
            }
            System.out.println("+++++++++++");
            System.out.println("+         +");
            System.out.println("+         +");
            System.out.println("+         +");
            System.out.println("+         +");
            System.out.println("+++++++++++");
            for(int i=0; i<child1.size(); i++){
                System.out.println("Second Child : "+child1.get(i).toString());
            }

            NewChild.add(child);
            NewChild.add(child1);

            return NewChild;

	}

    private void removeProfils(Element xmlVisualisationsElement, String element) {
        Element typEVisu = (Element) xmlVisualisationsElement.getChild("nuage3D");
        if (typEVisu != null) {
            List children = typEVisu.getChildren();
            for (Object child : children) {
                if (child instanceof Element) {
                    String valueElement = ((Element) child).getAttributeValue("valeur");
                    if (valueElement != null && valueElement.equals(element)) {
                        ((Element) child).detach();
                        break;
                    }
                }
            }
        }
    }

    static void ReadXMLFile(String fichier, int i) throws Exception {
//          SAXBuilder sxb = new SAXBuilder();
//          document = sxb.build(new File(fichier));
//          racine = document.getRootElement();
//          visualizations = racine.getChild("visualizations");
//          NameVisu = visualizations.getChild("nuage3D");
//          x = (NameVisu.getChild("nuage3D").getContentSize()-2)/2;
//          NameProfil = NameVisu.getChild("profil"+i);
     }

    static void ReadXMLFileGA(String fichier, int i) throws Exception {
          SAXBuilder sxb = new SAXBuilder();
          document = sxb.build(new File(fichier));
          racine = document.getRootElement();
          visualizations = racine.getChild("geneticalgorithm");
          NameVisu = visualizations.getChild("nuage3D");
          NameProfil = NameVisu.getChild("profil"+i);
          System.out.println("NumProfil = "+i);
          
     }

    //static void UpdateElement(int Individual_Size, List<List<Appariement>> appariement, int indice) {
    static void UpdateElement(List<Visualisation> Individual_Size, List<List<Appariement>> appariement, int indice) {
          System.out.println("******************************   "+appariement.size()+"     ******************************");
          Element TYpeVisu = (Element) NameProfil.getChild("profil"+indice);
          if (TYpeVisu != null) {
          int m =0;
          int i=0; 
          while(i<Individual_Size.size()){
          if(appariement.get(indice).get(m).getName_v_data().equals(Individual_Size.get(i).getName())){
          Element VisualAtt = NameProfil.getChild(appariement.get(indice).get(m).getName_v_data());
          VisualAtt.setText(appariement.get(indice).get(m).getName_data());
          i++;
          m=i;
          }
          else {
          m++;
          }
          }
          }
//          for(int j=0; j<Individual_Size.size(); j++){
//            Element VisualAtt = NameProfil.getChild(appariement.get(indice).get(j).getName_v_data());
//            VisualAtt.setText(appariement.get(indice).get(j).getName_data());
//          }
       }

    static void UpdateElement_InitialPopulation(int Individual_Size, List<List<Appariement>> appariement, int indice) {

          for(int j=0; j<Individual_Size; j++){
            System.out.println("Taille de Individual_Size : "+Individual_Size);
            System.out.println("taille de l'individu : "+appariement.get(indice).size());
            System.out.println(appariement.get(indice).get(j).getName_data()+"*******"+appariement.get(indice).get(j).getType_data());
            Element VisualAtt = NameProfil.getChild(appariement.get(indice).get(j).getName_v_data());
            VisualAtt.setText(appariement.get(indice).get(j).getName_data());
          }
     }

    static void UpdateVisualizationsElement(Element SelectedProfil, int indexProfil) {

        String baliseProfil = "profil" + indexProfil;
        //On crée une Liste contenant tous les noeuds "data" de l'Element racine
        Element visu = (Element) racine.getChild("visualizations");
        Element TypeVisu = (Element) visu.getChild("nuage3D");
        if (TypeVisu == null) {
            Element VisualizationName = new Element("nuage3D");
            visu.addContent(VisualizationName);
            TypeVisu = (Element) visu.getChild("nuage3D");
        }
        Element profilDefaut = (Element) TypeVisu.getChild("profilDefaut");
        //On fait un test sur le profil selectionné par defaut Ã  l'ouverture du fichier xml
        //s'il n'existe pas de profil par defaut on en créer un dans le fichier xml

        if (profilDefaut == null) {
            profilDefaut = new Element("profilDefaut");
            TypeVisu.addContent(profilDefaut);
        }

        profilDefaut.setText(baliseProfil);

        Element profil = (Element) TypeVisu.getChild(baliseProfil);

        if (profil == null) {
            profil = new Element(baliseProfil);
            TypeVisu.addContent(profil);
        }

        profil.setAttribute("valeur", baliseProfil);
        profil.removeContent();
        profil.addContent(SelectedProfil);

     }

    public List<Visualisation> GenererNewDataAttributeIndividual(List<Visualisation> DataAttrbuteChromosome) throws Exception {

        List<Visualisation> NewIndividual = new ArrayList<Visualisation>();
        Integer random = new Integer((int) Math.ceil(Math.random() * DataAttrbuteChromosome.size()-1));
        double Pmute = RandomValue();
        for(int i=0; i<DataAttrbuteChromosome.size(); i++){
                Visualisation newInd = new Visualisation();
                newInd.setName(DataAttrbuteChromosome.get(i).getName());
                newInd.setType(DataAttrbuteChromosome.get(i).getType());
                if(i == random){
                int NewValue = (int) ((DataAttrbuteChromosome.get(i).getImportance()) * (Pmute));
                newInd.setImportance(NewValue);
                }
                else{
                  newInd.setImportance(DataAttrbuteChromosome.get(i).getImportance());
                }
                NewIndividual.add(newInd);
            }
        NewIndividual  = new Matching().getListeTri(NewIndividual);

        return NewIndividual;
    }

    public List<Visualisation> GenererInitialDataAttributeIndividual(List<Visualisation> DataAttrbuteChromosome) throws Exception {

        List<Visualisation> NewIndividual = new ArrayList<Visualisation>();
        for(int i=0; i<DataAttrbuteChromosome.size(); i++){
                Visualisation newInd = new Visualisation();
                newInd.setName(DataAttrbuteChromosome.get(i).getName());
                newInd.setType(DataAttrbuteChromosome.get(i).getType());
                newInd.setImportance(DataAttrbuteChromosome.get(i).getImportance());
                NewIndividual.add(newInd);
            }
        NewIndividual  = new Matching().getListeTri(NewIndividual);

        return NewIndividual;
    }


    //On enregsitre notre nouvelle arborescence dans le fichier d'origine dans un format classique.
    public void enregistreFichier(String fichier) throws Exception
   {
         XMLOutputter sortie = new XMLOutputter(Format.getPrettyFormat());
         sortie.output(document, new FileOutputStream(fichier));
   }


    public void destroy() {
//        removeAllObjects();
//        removeAllPointOfViewListeners();
//        m_Universe.removeAllLocales();
//        Logger.getAnonymousLogger().log(Level.INFO, "{0} destroyed", this);
    }

   /**
     * Retire tous les objets de la scÃ¨ne.
     */
     public void removeAllObjectsCreateInitialIndividual() {
        MatchingResultInitiale.clear();
        PopInitiale.clear();
        vecTirageAleatoire.clear();
        CrossOverPopulation.clear();
        MatchingResultInitiale = null;
        PopInitiale = null;
        vecTirageAleatoire = null;
        individuSelect = null;
        CrossOverPopulation = null;
      }


    /**
    * @param args the command line arguments
    */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new VRMinerVisualAssistant_IGA().setVisible(true);
//            }
//        });
//    }

    private void updatePreview(String path, int profil){
        visu3D9 = new Visualisation_Nuage_3D(0, 0, 0);
        visu3D9.ConfigurationNuage3D(path, "profil"+profil);
        visu3D9.createScene();
        scrollpane9.setViewportView(visu3D9.getCustomCanvas3D());
    }

    public ArrayList getProfilArrayList(String profilSelected) {
        ArrayList list = new ArrayList();

        //On initialise un nouvel element racine avec l'element racine du document.
        racine = document.getRootElement();

        //On cree une Liste contenant tous les noeuds "data" de l'Element racine
        //Element visualisation = (Element) racine.getChild(VRMXML.VISUALIZATIONS_ELEMENT_NAME);
        Element visualisation = (Element) racine.getChild(VRMXML.IGA_ELEMENT_NAME);

        Element typeVisua = (Element) visualisation.getChild(NUAGE3D.NUAGE3D_NAME);

        int number = typeVisua.getChildren().size();
        
        Element profilDefaut = (Element) typeVisua.getChild("profilDefaut");

        if (profilDefaut != null) {
            SprofilDefaut = profilDefaut.getText().toString();
            //Dans le comptage du nombre de profil, on elimine le profil par defaut
            number--;
        } else {
            SprofilDefaut = "profil0";
        }

        setNumberProfil(number);

        //Si il n'y a pas de profil selectionne, on est au demarrage et on select le profil par defaut
        if (profilSelected.length() == 0) {
            profilSelected = SprofilDefaut;
        }

        Element profil = (Element) typeVisu.getChild(profilSelected);

        List listParam = profil.getChildren();

        if (!listParam.isEmpty()) {
            Iterator j = listParam.iterator();
            while (j.hasNext()) {
                //On affiche le nom de l'element courant
               Element param = (Element) j.next();
               List list_med = param.getChildren();
                   if (!list_med.isEmpty()) {
                        Iterator k = list_med.iterator();
                        while (k.hasNext()) {
                            Element el_list = (Element) k.next();
                            String val = el_list.getValue();
                            list.add(val);
                        }
                   }
                
            }
        }
        return list;
    }

    public void setNumberProfil(int _number) {
        numberProfil = _number;
    }

    public void SaveSelectedProfil(File xml, String baliseProfilSelectionne){

        String baliseProfil;
        SAXBuilder sxb = new SAXBuilder();
        racine = document.getRootElement();
        //On crée un nouveau document JDOM avec en argument le fichier XML
        try{
        document = sxb.build(xml);
        //On initialise un nouvel élément racine avec l'élément racine du document.
        racine = document.getRootElement();

        Element visualization = (Element) racine.getChild(VRMXML.VISUALIZATIONS_ELEMENT_NAME);
        Element geneticAlgorithm = (Element) racine.getChild(VRMXML.IGA_ELEMENT_NAME);

        Element Nuage3DIGA = geneticAlgorithm.getChild(NUAGE3D.NUAGE3D_NAME);

        Element Nuage3DVisualization = visualization.getChild(NUAGE3D.NUAGE3D_NAME);
        if (Nuage3DVisualization == null) {
            Element VisualizationName = new Element(NUAGE3D.NUAGE3D_NAME);
            visualization.addContent(VisualizationName);
            Nuage3DVisualization = (Element) visualization.getChild(NUAGE3D.NUAGE3D_NAME);
        }

        int number = Nuage3DVisualization.getChildren().size();
        System.out.println("Number of all profil(s) :"+number);

        Element profilDefaut = (Element) Nuage3DVisualization.getChild("profilDefaut");
        //On fait un test sur le profil selectionné par defaut Ã  l'ouverture du fichier xml
        //s'il n'existe pas de profil par defaut on en créer un dans le fichier xml
        if (profilDefaut == null) {
            profilDefaut = new Element("profilDefaut");
            Nuage3DVisualization.addContent(profilDefaut);
            profilDefaut.setText(SprofilDefaut);
        } else {
            //Dans le comptage du nombre de profil, on elimine le profil par defaut
            number--;
            baliseProfil = "profil"+number;
            profilDefaut.setText(baliseProfil);
        }
        baliseProfil = "profil"+number;

        Element profil = (Element) Nuage3DVisualization.getChild(baliseProfil);
        Element profil_ = (Element) Nuage3DIGA.getChild(baliseProfilSelectionne);

        if (profil == null) {
            profil = new Element(baliseProfil);
            Nuage3DVisualization.addContent(profil);
        }

        profil.setAttribute("valeur", baliseProfil);
        profil.removeContent();

        Iterator it = profil_.getChildren().iterator();
        while (it.hasNext()) {
          Element courant = (Element) it.next();
          Element e = new Element(courant.getName().toString());
          profil.addContent(e);
          e.setText(courant.getText());
        }
        }
        catch (Exception e) {
        System.err.println(e + " Erreur de lecture du xml");
        e.printStackTrace();
    }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckBox1;
    private javax.swing.JCheckBox CheckBox2;
    private javax.swing.JCheckBox CheckBox3;
    private javax.swing.JCheckBox CheckBox4;
    private javax.swing.JCheckBox CheckBox5;
    private javax.swing.JCheckBox CheckBox6;
    private javax.swing.JCheckBox CheckBox7;
    private javax.swing.JCheckBox CheckBox8;
    private javax.swing.JButton CloseButton;
    private javax.swing.JButton CreateFinalProfilButton;
    private javax.swing.JButton CreateNewPopulationButton;
    private javax.swing.JLabel Step4;
    private javax.swing.JLabel Step5;
    private javax.swing.JLabel Step6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panel3;
    private javax.swing.JPanel panel4;
    private javax.swing.JPanel panel5;
    private javax.swing.JPanel panel6;
    private javax.swing.JPanel panel7;
    private javax.swing.JPanel panel8;
    private javax.swing.JScrollPane scrollpane1;
    private javax.swing.JScrollPane scrollpane2;
    private javax.swing.JScrollPane scrollpane3;
    private javax.swing.JScrollPane scrollpane4;
    private javax.swing.JScrollPane scrollpane5;
    private javax.swing.JScrollPane scrollpane6;
    private javax.swing.JScrollPane scrollpane7;
    private javax.swing.JScrollPane scrollpane8;
    private javax.swing.JScrollPane scrollpane9;
    // End of variables declaration//GEN-END:variables
    private Visualisation_Nuage_3D visu3D1, visu3D2, visu3D3, visu3D4, visu3D5, visu3D6, visu3D7, visu3D8, visu3D9;
    final String XMLfilepathName;
    private String MethodeName, SprofilDefaut = "profil0";
    private List<Visualisation> ListInitialDataAttribute, listdeVisual, PopInitiale, ListVisualAttribute, ListDataAttribute, v_attribte, d_attribte, Initial_v_attribte, Initial_d_attribte;
    private List<Integer> vecTirageAleatoire;
    private boolean[] individuSelect;
    private boolean state = false;
    private List<Appariement> MatchingResultInitiale, NewMatchingResult, NewMatchingIndividualResult;
    private List<MEC> mec, mec1;
    private List<List<Appariement>> InitialPopulation, newPopulation, CrossOverPopulation;
    private List<Appariement> individuMEC;
    private int indiceSelectedProfil, PopulationSize = 8, NbreIteration, MaxIteration=10, Individual_Size;
    private double Pfilling = 0.2;
    private static Document document;
    private static Element racine, visualizations, NameVisu, NameProfil, typeVisu;
    private int numberProfil;
    private OffScreenCanvas3D offScreenCanvas = null;
    boolean imageReady = false;
    Off_ScreenCanvas3D k;
}
