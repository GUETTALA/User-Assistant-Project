/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IHM.java
 *
 * Created on 1 janv. 2011, 01:09:45
 */

package visualassistantfacv;

import VisualAssistantFDM.io.LoadVisualizations;
import VisualAssistantFDM.visualisation.ui.Visualisation;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.SwingWorker;
import visualisation3d.vrmNuage3D.Visualisation_Nuage_3D;
import vrminerlib.core.VRMinerFramework;

/**
 *
 * @author Abdelheq
 */
public class IHM extends javax.swing.JFrame {

    MissingIcon placeholderIcon = new MissingIcon();
    List<PreView> VisualisationsFilesNames = new ArrayList<PreView>();
    List<String> imageCaptions = new ArrayList<String>();
    List<Integer> mec;
    public List<Visualisation> liste, listdtm, listAttribute, maListe, individu;
    int idmethode;
    public String filePathName, imagedir = "images/";

    /** Creates new form IHM */
    public IHM() throws Exception{
        VRMinerFramework.initializeFramework();
        initComponents();
        VisualisationsFilesNames = new LoadVisualizations().LoadVisualizationsNames();
        loadimages.execute();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OverviewPictureContainer = new javax.swing.JScrollPane();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        DB_VisualizationToolBar = new javax.swing.JToolBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 291, Short.MAX_VALUE)
        );

        jButton1.setText("Load Data");

        jButton2.setText("Matching");

        jButton3.setText("Add Profil");

        jButton4.setText("Adjust Matching Result");

        jButton5.setText("Launch");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(152, Short.MAX_VALUE))
        );

        DB_VisualizationToolBar.setRollover(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OverviewPictureContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                    .addComponent(DB_VisualizationToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OverviewPictureContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                        .addGap(2, 2, 2)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DB_VisualizationToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private SwingWorker<Void, ThumbnailAction> loadimages = new SwingWorker<Void, ThumbnailAction>() {

        /**
         * Creates full size and thumbnail versions of the target image files.
         */

        protected Void doInBackground() throws Exception {
            for (int i = 0; i < VisualisationsFilesNames.size(); i++) {
                ImageIcon icon;
                int id = VisualisationsFilesNames.get(i).getIdimage();
                String shape = VisualisationsFilesNames.get(i).getNom();
                System.out.println("Id :"+ id+"  : Shape  "+shape);
                String identif = String.valueOf(id);
                icon = createImageIcon(imagedir+VisualisationsFilesNames.get(i).getNom()+".jpg", identif);
                //Action executer lors du clique sur l'icone
                ThumbnailAction thumbAction;
                if(icon != null){
                    //Dimension de l'icone (image) placer en bas de la fenetres (visualisations proposées par le système contenus dans la base de données
                    ImageIcon thumbnailIcon = new ImageIcon(getScaledImage(icon.getImage(), 170, 170));
                    ImageIcon OverviewIcon = new ImageIcon(getScaledImage(icon.getImage(), 700, 395));
                    //paramétre affecté à thumbAction
                    thumbAction = new ThumbnailAction(OverviewIcon, thumbnailIcon, identif);

                }else{
                    // the image failed to load for some reason so load a placeholder instead
                    thumbAction = new ThumbnailAction(placeholderIcon, placeholderIcon, imageCaptions.get(i));
                }
                publish(thumbAction);

            }
            // unfortunately we must return something, and only null is valid to
            // return when the return type is void.

            return null;
        }

        /**
         * Process all loaded images.
         */
        @Override
        protected void process(List<ThumbnailAction> chunks) {
            for (ThumbnailAction thumbAction : chunks) {
                JButton thumbButton = new JButton(thumbAction);
                // add the new button BEFORE the last glue
                // this centers the buttons in the toolbar
//                JProgressBar progressBar = new JProgressBar(JProgressBar.VERTICAL, 0, 100);
//                //progressBar.set
//                progressBar.setValue(53);
//                progressBar.setStringPainted(true);
//                //DB_VisualizationToolBar.add(progressBar);
                DB_VisualizationToolBar.add(thumbButton, DB_VisualizationToolBar.getComponentCount());
            }
        }


        };



    /**
     * Creates an ImageIcon if the path is valid.
     * @param String - resource path
     * @param String - description of the file
     */
    protected ImageIcon createImageIcon(String path,
            String description) throws IOException {

        //java.net.URL imgURL = getClass().getResource(path);
        ClassLoader cl = ClassLoader.getSystemClassLoader();
        java.net.URL imgURL = ClassLoader.getSystemResource(path);

        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    public Image getScaledImage(Image srcImg, int w, int h){
        BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = resizedImg.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(srcImg, 0, 0, w, h, null);
        g2.dispose();
        return resizedImg;
    }

    private class ThumbnailAction extends AbstractAction{

        /**
         *The icon if the full image we want to display.
         */
        private Icon displayPhoto;
        private int idtable;


        /**
         * @param Icon - The full size photo to show in the button.
         * @param Icon - The thumbnail to show in the button.
         * @param String - The descriptioon of the icon.
         */
        public ThumbnailAction(Icon photo, Icon thumb, String desc){

            //Dimension de l'icone (image) placer en bas de la fenetres (visualisations proposées par le système contenus dans la base de données
            displayPhoto = photo;
            //displayPhoto = new ImageIcon(getScaledImage(photo.getImage(), 200, 200));


            // The short description becomes the tooltip of a button.
            putValue(SHORT_DESCRIPTION, desc);
            idtable = Integer.valueOf(desc);
            // The LARGE_ICON_KEY is the key for setting the
            // icon when an Action is applied to a button.
            putValue(LARGE_ICON_KEY, thumb);
        }

        /**
         * Shows the full image in the main area and sets the application title.
         */
    public void actionPerformed(ActionEvent e) {
        //
        //"C:\\Users\\Abdelheq\\Desktop\\VRMiner\\ceries exemples.xml"
        //OverviewPictureContainer.setIcon(displayPhoto);
        String path = "C:\\Users\\Abdelheq\\Desktop\\VRMiner\\Presentation visualisations exemples\\Photos\\ceries exemples.xml";
            try {
                System.out.println("Id Visualization : "+idtable);
                idmethode = idtable;
                //creer la scene 3D
                updatePreview(path, idmethode-1);
                String shape = new LoadVisualizations().getIdElement(idmethode);
                System.out.println("Shape : "+shape);
                listdtm = new LoadVisualizations().getIdMethode(idmethode);
                 for(int i =0; i<listdtm.size(); i++){
                     System.out.println("Attribute : "+listdtm.get(i).getName().toString());
                 }

                } catch (Exception ex) {
                //TODO
                }
        }
    }


    private void updatePreview(String path, int profil){
        Visualisation_Nuage_3D visu3D = new Visualisation_Nuage_3D(0, 0, 0);
        //String path = "C:\\Users\\Abdelheq\\Desktop\\IRIS.xml";
        visu3D.ConfigurationNuage3D(path, "profil"+profil);
        visu3D.createScene();
        OverviewPictureContainer.setViewportView(visu3D.getCustomCanvas3D());
    }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new IHM().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar DB_VisualizationToolBar;
    private javax.swing.JScrollPane OverviewPictureContainer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

}
